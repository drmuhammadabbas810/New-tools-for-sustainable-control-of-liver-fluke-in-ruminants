1.	First upload reference genome GCA_002763495.2_F_hepatica_1.0.allpaths.pg and merge read files generated by FASTp form Illumina reads of the whole genome of samples MR1 1/3_no and VPC1 1/3 to HPC cluster University of Surrey.
# Change directory to the specified path
cd /parallel_scratch/ma04426/Ref\ assembly\ F_hepatica_1.0.allpaths/

# Build Bowtie 2 index using the updated reference genome file
bowtie2-build GCA_002763495.2_F_hepatica_1.0.allpaths.pg_genomic.fna genome_index
2.	# Align the merged reads to the reference genome using Bowtie 2
bowtie2 -x genome_index \
        -U MCR1_1_3_no_merged.fastq.gz \
        -S output.sam \
        --threads 4
Then rename the sam file produced (MR13_no_USA.sam) 

3.	# Align the merged reads to the reference genome using Bowtie 2
bowtie2 -x genome_index \
        -U VPC1_1_3_merged.fastq.gz \
        -S output.sam \
        --threads 4

Then rename the sam file produced (VPC1_13_USA.sam)

4.	Command line for converting .sam file to .bam file

# Change the directory to the specified path
cd /parallel_scratch/ma04426/Ref\ assembly\ F_hepatica_1.0.allpaths/

samtools view -bS "MR13_no_USA.sam" > "MR13_no_USA.bam"

samtools view -bS "VPC1_13_USA.sam" > "VPC1_13_USA.bam"

5.	First, generate a pileup file from .bam files:
First, Sort the BAM file from both samples by using the following command lines
# Change directory to the specified path
cd /parallel_scratch/ma04426/Ref\ assembly\ F_hepatica_1.0.allpaths/
# Sort the BAM file 
samtools sort "MR13_no_USA.bam" -o "MR13_no_USA.sorted.bam"

# Sort the BAM file
samtools sort "VPC1_13_USA.sam" -o "VPC1_13_USA.sorted.bam"
6.	# Index the first sorted BAM files
# Index the sorted BAM file (MR13_no_USA.sorted.bam)
samtools index "MR13_no_USA.sorted.bam"
# Index the sorted BAM file (VPC1_13_USA.sorted.bam)
samtools index "VPC1_13_USA.sorted.bam"

7.	# Pileup for MR13_no_USA.sorted.bam
samtools mpileup -f "GCA_002763495.2_F_hepatica_1.0.allpaths.pg_genomic.fna" "MR13_no_USA.sorted.bam" > "MR13_no_USA.pileup"
# Pileup for VPC1_13_USA.sorted.bam
samtools mpileup -f "GCA_002763495.2_F_hepatica_1.0.allpaths.pg_genomic.fna" "VPC1_13_USA.sorted.bam" > "VPC1_13_USA.pileup"

8.	Generating a consensus sequence from two samples, VPC1 1/3 and MR1 1/3_no with the USA reference genome GCA_002763495.2_F_hepatica_1.0.allpaths.pg_genomic.fna

# Call variants for VPC1_13_USA.sorted.bam
bcftools mpileup -Ou -f GCA_002763495.2_F_hepatica_1.0.allpaths.pg_genomic.fna VPC1_13_USA.sorted.bam | bcftools call -mv -Ov -o VPC1_13_USA.vcf

# Call variants for MR13_no_USA.sorted.bam
bcftools mpileup -Ou -f GCA_002763495.2_F_hepatica_1.0.allpaths.pg_genomic.fna MR13_no_USA.sorted.bam | bcftools call -mv -Ov -o MR13_no_USA.vcf

Explanation of the command: 
bcftools mpileup: This command generates a pileup from a sorted BAM file. A pileup is a compacted representation of the alignment information at each position in the reference genome.

-Ov: Specifies the output format (v stands for uncompressed BCF).
-f GCA_002763495.2_F_hepatica_1.0.allpaths.pg_genomic.fna: Specifies the reference genome file in FASTA format.
|: The pipe (|) symbol is used to redirect the output of the first command as the input to the next command.

bcftools call: This command is used to call variants from the pileup.

-mv: Options for variant calling:
m: Multi-allelic calling.
u: Output variant sites only, excluding reference positions.
-Ou: Specifies the output format as a VCF file.
-o VPC1_13_USA.vcf: Specifies the output file name as VPC1_13_USA.vcf.

9.	Compress VCF files 

Compress VCF Files using bgzip:
# Compress MR13_no_USA.vcf using bgzip
bgzip MR13_no_USA.vcf

# Compress VPC1_13_USA.vcf using bgzip
bgzip VPC1_13_USA.vcf

10.	First, index the VCF File with GATK 4.4.0.0 

java -Dsamjdk.use_async_io_read_samtools=false \
     -Dsamjdk.use_async_io_write_samtools=true \
     -Dsamjdk.use_async_io_write_tribble=false \
     -Dsamjdk.compression_level=2 \
     -jar /opt/software/pkgs/GATK/4.4.0.0-GCCcore-12.2.0-Java-17/gatk-package-4.4.0.0-local.jar \
     IndexFeatureFile -I VPC1_13_USA.vcf.gz


java -Dsamjdk.use_async_io_read_samtools=false \
     -Dsamjdk.use_async_io_write_samtools=true \
     -Dsamjdk.use_async_io_write_tribble=false \
     -Dsamjdk.compression_level=2 \
     -jar /opt/software/pkgs/GATK/4.4.0.0-GCCcore-12.2.0-Java-17/gatk-package-4.4.0.0-local.jar \
     IndexFeatureFile -I MR13_no_USA.vcf.gz

11.	Then filter variants with GATK 4.4.0.0 
# For MR13_no_USA.vcf.gz
gatk VariantFiltration -V MR13_no_USA.vcf.gz -O MR13_3filtered_variants.vcf.gz --filter-expression "QD < 2.0 || FS > 60.0 || MQ < 40.0" --filter-name "basic_filter"

# For VPC1_13_USA.vcf.gz
gatk VariantFiltration -V VPC1_13_USA.vcf.gz -O VPC1_3filtered_variants.vcf.gz --filter-expression "QD < 2.0 || FS > 60.0 || MQ < 40.0" --filter-name "basic_filter"

12.	Then, Create a PASS-Only VCF files for both samples with GATK 4.4.0.0
# For MR13_no_USA.vcf.gz
java -Dsamjdk.use_async_io_read_samtools=false \
     -Dsamjdk.use_async_io_write_samtools=true \
     -Dsamjdk.use_async_io_write_tribble=false \
     -Dsamjdk.compression_level=2 \
     -jar /opt/software/pkgs/GATK/4.4.0.0-GCCcore-12.2.0-Java-17/gatk-package-4.4.0.0-local.jar \
     SelectVariants -V /parallel_scratch/ma04426/Ref\ assembly\ F_hepatica_1.0.allpaths/MR13_3filtered_variants.vcf.gz --exclude-filtered true -O /parallel_scratch/ma04426/Ref\ assembly\ F_hepatica_1.0.allpaths/MR13_3pass_variants.vcf.gz

# For VPC1_13_USA.vcf.gz
java -Dsamjdk.use_async_io_read_samtools=false \
     -Dsamjdk.use_async_io_write_samtools=true \
     -Dsamjdk.use_async_io_write_tribble=false \
     -Dsamjdk.compression_level=2 \
     -jar /opt/software/pkgs/GATK/4.4.0.0-GCCcore-12.2.0-Java-17/gatk-package-4.4.0.0-local.jar \
     SelectVariants -V /parallel_scratch/ma04426/Ref\ assembly\ F_hepatica_1.0.allpaths/VPC1_3filtered_variants.vcf.gz --exclude-filtered true -O /parallel_scratch/ma04426/Ref\ assembly\ F_hepatica_1.0.allpaths/VPC1_3pass_variants.vcf.gz

13.	Merge VCF Files using module load GCC/12.2.0 BCFtools/1.17
bcftools merge MR13_3pass_variants.vcf.gz VPC1_3pass_variants.vcf.gz -o merged_variants.vcf

14.	Compress the VCF File with bgzip:
bgzip merged_variants.vcf

15.	Sort and Index the Merged Variants:
# Sort the gzipped VCF file and save the sorted VCF file
bcftools sort merged_variants.vcf.gz -o sorted_merged_variants.vcf

bgzip sorted_merged_variants.vcf

# Index the sorted VCF file
bcftools index sorted_merged_variants.vcf.gz

16.	Create the Consensus Sequence

Index the Compressed VCF File
tabix -p vcf merged_variants.vcf.gz

Generate the Consensus Sequence:
bcftools consensus -f GCA_002763495.2_F_hepatica_1.0.allpaths.pg_genomic.fna -o consensus_sequence.fa merged_variants.vcf.gz

17.	You can see and examine the consensus sequence in the IGV viewer

18.	Extract fragments from the reference genome GCA_002763495.2_F_hepatica_1.0.allpaths.pg_genomic.fna using the merged VCF file with threshold limits 5 or more consecutive or non-consecutive SNPs

To do this, first produce a BED file from the merged VCF file with threshold limits 5 or more consecutive or non-consecutive SNPs

bcftools query -f '%CHROM\t%POS\n' merged_variants.vcf.gz | \
  awk -v threshold=5 '{
    if (last_chrom != $1) {
        last_chrom = $1
        last_pos = $2
        snp_count = 1
    } else {
        if ($2 <= last_pos + 1) {
            snp_count++
        } else {
            snp_count = 1
        }
    }
    last_pos = $2
    if (snp_count >= threshold) {
        print $1, $2 - snp_count + 1, $2
    }
}' > consecutive_5_or_more_snps.bed


19.	Manipulation of BED file and extracting fragments  

Modify the bed file by expanding numbers in columns two and three by 100 on each side by subtracting 100 in column 2 and adding 100 from column 3 with the following command

awk -v left=100 -v right=100 'BEGIN{OFS="\t"} { $2 -= left; $3 += right; print }' consecutive_5_or_more_snps.bed > modified_consecutive_snps.bed

20.	 Extract fragments from the reference sequence with BEDtools 
bedtools getfasta -fi GCA_002763495.2_F_hepatica_1.0.allpaths.pg_genomic.fna -bed modified_consecutive_snps.bed -name -fo extracted_sequence_fragments.fasta

Visualise the extracted fasta file containing 5 or more SNPs in Geneious 
