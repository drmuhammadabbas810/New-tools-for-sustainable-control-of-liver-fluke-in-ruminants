1. To make a consensus sequence of our two samples with reference genome
First, generate a pileup file from .bam files:
1. First, Sort the BAM file from both samples by using the following command lines
samtools sort /users/ma04426/WGS\ bowtie2/VPC1_13_UK.bam -o /users/ma04426/WGS\ bowtie2/VPC1_13_UK.sorted.bam
samtools sort /users/ma04426/WGS\ bowtie2/MR1_13_UK.bam -o /users/ma04426/WGS\ bowtie2/MR1_13_UK.sorted.bam
This command will sort the "VPC1_13_UK.bam" file and save the sorted output as "VPC1_13_UK.sorted.bam". Similarly, it will sort the "MR1_13_UK.bam" file and save the sorted output as "MR1_13_UK.sorted.bam".
2. Index the sorted BAM files 
samtools index /users/ma04426/WGS\ bowtie2/VPC1_13_UK.sorted.bam
samtools index /users/ma04426/WGS\ bowtie2/MR1_13_UK.sorted.bam

These above commands will generate index files with the .bai extension in the same directory as the sorted BAM files. Indexing the BAM files will allow for faster retrieval of specific regions of interest during analysis.

3. Run SAMtools mpileup with the sorted and indexed BAM files with reference genome:
samtools mpileup -f GCA_900302435.1_Fasciola_10x_pilon_genomic.fna /users/ma04426/WGS\ bowtie2/VPC1_13_UK.sorted.bam > VPC1_13_UK.pileup
samtools mpileup -f GCA_900302435.1_Fasciola_10x_pilon_genomic.fna /users/ma04426/WGS\ bowtie2/MR1_13_UK.sorted.bam > MR1_13_UK.pileup
Generating a consensus sequence from two samples, VPC1 1/3 and MR1 1/3_no with the UK reference genome:
1. Call Variants:
Run the following commands to call variants from the raw sorted BAM files using bcftools:
bcftools mpileup -Ou -f GCA_900302435.1_Fasciola_10x_pilon_genomic.fna /users/ma04426/WGS\ bowtie2/VPC1_13_UK.sorted.bam | bcftools call -mv -Ov -o VPC1_13_UK.vcf
bcftools mpileup -Ou -f GCA_900302435.1_Fasciola_10x_pilon_genomic.fna /users/ma04426/WGS\ bowtie2/MR1_13_UK.sorted.bam | bcftools call -mv -Ov -o MR1_13_UK.vcf
2. Compress VCF Files using bgzip:
bgzip VPC1_13_UK.vcf
bgzip MR1_13_UK.vcf
3. Index Compressed VCF Files using tabix:
tabix -p vcf VPC1_13_UK.vcf.gz
tabix -p vcf MR1_13_UK.vcf.gz
2. Merge VCF Files:
Merge the .gz VCF files generated from the two sorted BAM files with the following command 
bcftools merge VPC1_13_UK.vcf.gz MR1_13_UK.vcf.gz -Ov -o merged.vcf
3. Compress VCF File using bgzip:
bgzip merged.vcf
4. Index Compressed VCF File using tabix
tabix -p vcf merged.vcf.gz 
5. Generate Consensus Sequence:
Generate the fasta file of consensus sequence from the merged VCF file with the following command 
bcftools consensus -f GCA_900302435.1_Fasciola_10x_pilon_genomic.fna merged.vcf.gz > merged_consensus.fasta
6. To produce consensus_sequence.fa file following command was used 
bcftools consensus -f /users/ma04426/WGS\ bowtie2/GCA_900302435.1_Fasciola_10x_pilon_genomic.fna merged.vcf.gz > consensus_sequence.fa
To see the statistics of variants in both samples from VCF file
bcftools stats: For "VPC1_13_UK.vcf.gz":
bcftools stats /users/ma04426/WGS\ bowtie2/VPC1_13_UK.vcf.gz > VPC1_13_UK_stats.txt
For "MR1_13_UK.vcf.gz":
bcftools stats /users/ma04426/WGS\ bowtie2/MR1_13_UK.vcf.gz > MR1_13_UK_stats.txt
For merged VCF files from both samples 
bcftools stats merged.vcf.gz > merged.stats
Filtering variants with GATK 4.4.0.0
First, index the VCF File:
java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /opt/software/pkgs/GATK/4.4.0.0-GCCcore-12.2.0-Java-17/gatk-package-4.4.0.0-local.jar IndexFeatureFile -I VPC1_13_UK.vcf.gz
Then filter variants 
gatk VariantFiltration -V MR1_13_UK.vcf.gz -O MR11_3filtered_variants.vcf.gz --filter-expression "QD < 2.0 || FS > 60.0 || MQ < 40.0" --filter-name "basic_filter"
-V specifies the input VCF file.
-O specifies the output VCF file with filtered variants.
--filter-expression defines the filtering criteria. In this, variants with Quality by Depth (QD) less than 2.0, Fisher Strand (FS) greater than 60.0, or Mapping Quality (MQ) less than 40.0 will be filtered out.
--filter-name assigns a filter name to the variants that fail the criteria (e.g., "basic_filter").
Then, Create a PASS-Only VCF
 java -Dsamjdk.use_async_io_read_samtools=false -Dsamjdk.use_async_io_write_samtools=true -Dsamjdk.use_async_io_write_tribble=false -Dsamjdk.compression_level=2 -jar /opt/software/pkgs/GATK/4.4.0.0-GCCcore-12.2.0-Java-17/gatk-package-4.4.0.0-local.jar SelectVariants -V MR11_3filtered_variants.vcf.gz --exclude-filtered true -O pass_variants.vcf.gz
Creating consensus sequence with VCF passed files from GATK 4.4.0.0
Merge VCF Files:
bcftools merge MR11_3pass_variants.vcf.gz VPC1_3filtered_variants.vcf.gz -o merged_variants.vcf
Sort and Index the Merged Variants:
bcftools sort merged_variants.vcf -o sorted_merged_variants.vcf
bcftools index sorted_merged_variants.vcf
Create the Consensus Sequence:
Compress the VCF File with bgzip:
bgzip merged_variants.vcf
Index the Compressed VCF File
tabix -p vcf merged_variants.vcf.gz
Generate the Consensus Sequence:
bcftools consensus -f GCA_900302435.1_Fasciola_10x_pilon_genomic.fna -o consensus_sequence.fa merged_variants.vcf.gz
Extracting fragments containing SNPs positions BED tools
Command line for generating bed file; To identify regions with 4 or more consecutive SNPs based on their positions (Sample MR1 1/3_no)
bcftools query -f '%CHROM\t%POS\n' MR11_3pass_variants.vcf.gz | \
  awk -v threshold=4 '{
    if (last_chrom != $1) {
        last_chrom = $1
        last_pos = $2
        snp_count = 1
    } else {
        if ($2 == last_pos + 1) {
            snp_count++
        } else {
            snp_count = 1
        }
        last_pos = $2
    }
    if (snp_count >= threshold) {
        print $1, $2 - snp_count + 1, $2
    }
}' > consecutive_4_or_more_snps.bed
threshold variable to 4 means it will identify regions with 4 or more consecutive SNPs based on their positions. The output will be saved in a BED file named consecutive_4_or_more_snps.bed.
Modifying the bed file produced is an important step Extract fragments from the reference genome
1. Modify this bed file with expanding numbers in columns two and three by 100 on each side by subtracting 100 in column 2 and adding 100 from column 3
awk -v left=100 -v right=100 'BEGIN{OFS="\t"} { $2 -= left; $3 += right; print }' consecutive_4_or_more_snps.bed > modified_consecutive_snps.bed
2. Extract fragments from the UK reference genome 
bedtools getfasta -fi GCA_900302435.1_Fasciola_10x_pilon_genomic.fna -bed modified_consecutive_snps_renamed.bed -fo extracted_sequence_fragments.fasta
Extract fragments from the UK reference genome from the merged VCF file using threshold limits 5 or more consecutive or non-consecutive SNPs
1. Both VCF files from sample MR1 1/3_no and VPC1 1/3 were merged by using following command line 
bcftools index MR11_3pass_variants.vcf.gz
bcftools index VPC11_3pass_variants.vcf.gz
bcftools merge MR11_3pass_variants.vcf.gz VPC11_3pass_variants.vcf.gz -Ov -o merged.vcf
2. Produce bed file from merged VCF file 
bcftools query -f '%CHROM\t%POS\n' merged.vcf.gz | \
  awk -v threshold=5 '{
    if (last_chrom != $1) {
        last_chrom = $1
        last_pos = $2
        snp_count = 1
    } else {
        if ($2 <= last_pos + 1) {
            snp_count++
        } else {
            snp_count = 1
        }
    }
    last_pos = $2
    if (snp_count >= threshold) {
        print $1, $2 - snp_count + 1, $2
    }
}' > consecutive_5_or_more_snps.bed

Threshold variable to 5 means it will identify regions with 5 or more consecutive or non-consecutive SNPs  based on their positions. The output will be saved in a BED file named consecutive_5_or_more_snps.bed.
Manipulation of BED file and extracting fragments  
3. Modify this bed file with expanding numbers in columns two and three by 100 on each side by subtracting 100 in column 2 and adding 100 from column 3
awk -v left=100 -v right=100 'BEGIN{OFS="\t"} { $2 -= left; $3 += right; print }' consecutive_5_or_more_snps.bed > modified_consecutive_snps.bed
4. Extract fragments from the reference sequence 
bedtools getfasta -fi GCA_900302435.1_Fasciola_10x_pilon_genomic.fna -bed modified_consecutive_snps.bed -name -fo extracted_sequence_fragments.fasta
In this command:
-fi GCA_900302435.1_Fasciola_10x_pilon_genomic.fna specifies the input reference genome FASTA file.
-bed modified_consecutive_snps.bed specifies the input BED file containing the intervals to extract.
-name ensures that the name of the sequence is included in the output FASTA headers.
-fo extracted_sequence_fragments.fasta specifies the output file where the extracted sequence fragments will be saved.
Running these commands will extract sequence fragments from the specified scaffolds in the reference genome based on the intervals provided in the BED file, and the sequences will be saved in the "extracted_sequence_fragments.fasta" file.
